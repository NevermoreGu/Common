// Top-level build file where you can add configuration options common to all sub-projects/modules.

buildscript {
    repositories {
        google()
        jcenter()
        mavenCentral()
        maven { url "https://jitpack.io" }

    }
    dependencies {
        classpath 'com.android.tools.build:gradle:3.1.0'
        //下面对应gradle4.1及以上，4.1以下用 classpath 'com.novoda:bintray-release:0.3.4'
        classpath 'com.novoda:bintray-release:0.8.1'
        classpath 'com.jakewharton:butterknife-gradle-plugin:9.0.0'

    }
}

allprojects {
    repositories {

        flatDir {
            dirs 'libs'
            dirs project(':PayLibrary').file('libs')
        }
        google()
        jcenter()
        mavenCentral()
//        maven { url 'http://developer.huawei.com/repo/' }
        maven { url "https://jitpack.io" }

        maven { url 'https://dl.bintray.com/umsdk/release' }
        maven {
            url "http://maven.aliyun.com"
        }
        maven {
            url "http://mvn.mob.com/android"
        }

    }

    ext {
        //统一管理版本
        compileSdkVersion = 28
        buildToolsVersion = '28.0.3'

        minSdkVersion = 21
        targetSdkVersion = 28
        versionCode = 1
        versionName = '1.0.0'

        appSourceCompatibility = 1.8
        appTargetCompatibility = 1.8

        storeFile = 'yxchat.keystore'
        storePassword = 'qazwsxedc'
        keyAlias = 'yxchat'
        keyPassword = 'qazwsxedc'

        // App dependencies
        //test dependencies
        junitVersion = '4.12'
        runnerVersion = '1.0.2'
        espressoVersion = '3.0.2'

        neteaseVersion = '6.5.0'
        glideVersion = '4.7.1'

        arouterApiVersion = '1.5.0'
        arouterCompilerVersion = '1.2.2'

        butterknifeVersion = '9.0.0'
        butterknifeCompilerVersion = '9.0.0'

        supportLibraryVersion = '28.0.0'
        constraintLayoutVersion = '1.1.3'
        daggerVersion = '2.6'
        baseRecyclerViewAdapterHelperVersion = '2.9.30'
        isModule = false

        //dev 1 beta 2 release 3
        environmentAddress = '1'
    }
}

task clean(type: Delete) {
    delete rootProject.buildDir
}

// ---------- 编译并发布AAR (删除旧AAR，编译新AAR，拷贝新AAR至同一目录) ----------

//task aarRelease(type: Copy) {
//
//    // 任务开始
//    println "----------> AAR Release Task Start <----------"
//
//    // 根路径
//    def rootPath = rootProject.rootDir.parentFile.path
//    // AAR所在的编译路径
//    def buildPath = "/build/outputs/aar"
//    // AAR输出路径
//    def aarOutPath = rootPath + "/aar_release"
//
//    def libraryPath1 = rootPath + "/library" + "/UILibrary" + buildPath
//    def libraryPath2 = rootPath + "/library" + "/NetworkLibrary" + buildPath
//    def libraryPath3 = rootPath + "/library" + "/ShareLibrary" + buildPath
//    def libraryPath4 = rootPath + "/library" + "/ZXingLibrary" + buildPath
//    def libraryPath5 = rootPath + "/library" + "/ImageLibrary" + buildPath
//    def libraryPath6 = rootPath + "/library" + "/UtilsLibrary" + buildPath
//    def libraryPath7 = rootPath + "/library" + "/PayLibrary" + buildPath
//
//    // 封装数组
//    def modulePaths = [libraryPath1, libraryPath2, libraryPath3, libraryPath4, libraryPath5, libraryPath6, libraryPath7]
//
//    // 删除AAR输出目录
//    println "Delete -> " + aarOutPath
//    delete aarOutPath
//    // 循环删除各个AAR编译目录
//    for (path in modulePaths) {
//        println "Delete -> " + path
//        delete path
//    }
//
//    // 执行编译AAR脚本（原生脚本）
////    aarRelease.dependsOn(assembleRelease)
//    dependsOn 'assembleRelease'
//
//    // 循环拷贝AAR到ARR输出目录
//    for (path in modulePaths) {
//
//        def destationFile = new File(path)
//        println destationFile.path
//        if (destationFile.isDirectory()) {
//
//            for (file in destationFile.listFiles()) {
//
//                try {
//                    //判断文件夹是否存在
//                    if (!file.exists()) {
//                        file.mkdir()
//                    }
//
//                    // 显示开始拷贝
//                    println "-> Start of current copy <-"
//                    // 当前目录
//                    println "From : " + file.path
//                    //拷贝
//                    copy {
//                        from file.path
//
//                        // 拷贝至 aarOutPath
//                        println "Into : " + aarOutPath
//                        into aarOutPath
//                    }
//
//                    // 显示当前拷贝结束
//                    println "-> End of current copy <-"
//
//                } catch (Exception e) {
//                    println e.printStackTrace()
//                    e.printStackTrace()
//                }
//            }
//        }
//
//
//    }
//    // 任务结束
//    println "----------> AAR Release Task End <----------"
//
//}


